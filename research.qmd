---
title: "Research"
echo: false
jupyter: python3
section-divs: false
keep-md: false
---

## Publications and Preprints

```{python}
#| output: asis
import yaml
from IPython.display import display, Markdown

def readable_list(s):
    if len(s) < 3:
        return " and ".join(map(str, s))
    *a, b = s
    return f"{', '.join(map(str, a))} and {b}"

papers_data = yaml.safe_load(open("papers.yml"))
papers_data = dict(
    sorted(papers_data.items(), key=lambda item: item[1]["year"], reverse=True)
)

paper_texts = list()
for _, data in papers_data.items():
    citation_texts = []

    citation_texts.append(data["title"])

    authors = [
        author if author != "me" else "Kenneth Hung"
        for author in data["authors"]
    ]
    details_texts = [readable_list(authors)]
    venue = data.get("venue")
    if venue is not None:
      details_texts.append(f"*{venue}*")
    details_texts.append(str(data["year"]))
    status = data.get("status")
    if status is not None:
      details_texts.append(f"*{status}*")
    if len(details_texts) > 0:
      details_text = ", ".join(details_texts)
      citation_texts.append(details_text)
    
    links = []
    # pdf
    pdf = data.get("pdf")
    if pdf is not None:
        links.append(f"[pdf]({pdf})")
    # arxiv
    arxiv = data.get("arxiv")
    if arxiv is not None:
        links.append(f"[arxiv]({arxiv})")
    # url
    url = data.get("url")
    if url is not None:
        links.append(f"[{data['venue-short']}]({url})")
    # git
    git = data.get("git")
    if git is not None:
        links.append(f"[git]({git})")
    if len(links) > 0:
      links_text = "(" + ", ".join(links) + ")"
      citation_texts.append(links_text)

    paper_text = "- " + ". ".join(citation_texts)
    paper_texts.append(paper_text)
display(Markdown("\n".join(paper_texts)))
```

## Presentations

```{python}
presentations_data = yaml.safe_load(open("presentations.yml"))
for key in presentations_data:
    presentations_data[key]["venues"].sort(key=lambda item: item["year"], reverse=True)
presentations_data = dict(
    sorted(
        presentations_data.items(),
        key=lambda item: item[1]["venues"][0]["year"],
        reverse=True
    )
)

presentation_texts = list()
for _, data in presentations_data.items():
    venues = [
        f"{venue['type']} at [{venue['venue']}]({venue['link']})"
        for venue in data["venues"]
    ]
    venues_text = ", ".join(venues)
    presentation_text = f"- {data['title']} ({venues_text})"
    presentation_texts.append(presentation_text)
display(Markdown("\n".join(presentation_texts)))
```